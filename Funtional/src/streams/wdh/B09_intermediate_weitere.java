package streams.wdh;


import java.util.Arrays;
import java.util.List;
import java.util.stream.Stream;

public class B09_intermediate_weitere {

	/*
	 *    
	 */
	public static void main(String[] args) {
	
		/*
		 * parallel()
		 * sequential()
		 * unordered()
		 */
		List<Integer> list = Arrays.asList(1,2,3,4,5);
		
		/*
		 * Bsp.1 
		 *
		 */
		/*
		 * parallel(): 
		 * 				ทำให้ Stream ทำงานในโหมดขนาน (Parallel Mode) ซึ่งหมายความว่าแต่ละการดำเนินการใน 
		 * 				Stream จะถูกประมวลผลพร้อมกัน โดยใช้หลายเธรด (threads) 
		 * 				เพื่อเพิ่มประสิทธิภาพการทำงานในกรณีที่มีข้อมูลจำนวนมาก
		 * sequential():
		 * 				เปลี่ยน Stream กลับมาเป็นโหมดเรียงลำดับ (Sequential Mode) 
		 * 				ซึ่งทำให้การประมวลผลเกิดขึ้นในลำดับเดียวกันแบบต่อเนื่อง โดยใช้เธรดเดียว
		 * parallel():
		 * 				กลับไปที่โหมดขนานอีกครั้ง การดำเนินการใน Stream หลังจากนี้จะถูกทำงานในโหมดขนานอีกครั้ง 
		 * 				ดยใช้หลายเธรดอีกครั้งหนึ่งsequential():เปลี่ยน Stream กลับมาเป็นโหมดเรียงลำดับอีกครั้ง 
		 * 				การดำเนินการทั้งหมดหลังจากนี้จะเกิดขึ้นในลำดับเดียวกัน โดยใช้เธรดเดียว
		 * unordered()  
		 * 				เมื่อคุณใช้ unordered(), คุณบอกให้ Stream ว่าไม่จำเป็นต้องรักษาลำดับของสมาชิกใน 
		 * 				Stream อีกต่อไป ซึ่งทำให้การประมวลผลสามารถเกิดขึ้นได้อย่างรวดเร็วขึ้นในบางสถานการณ์ 
		 * 				เป็นเครื่องมือที่ดีในการเพิ่มประสิทธิภาพของการประมวลผลข้อมูลใน Stream เมื่อคุณไม่ต้องการรักษาลำดับของข้อมูล!
		 */
		list.stream()
			.parallel()
			.sequential()
			.parallel()
			.sequential()
			.forEach(System.out::println);
			
		/*
		 * โค้ดนี้จะทำการสลับระหว่างโหมดขนานและโหมดเรียงลำดับ โดยแต่ละการเรียก parallel() และ sequential() 
		 * จะเปลี่ยนวิธีการประมวลผลของ Stream
		 * เมื่อถึง forEach(), การประมวลผลจะเกิดขึ้นในโหมดสุดท้ายที่กำหนดไว้ (ในที่นี้คือโหมดเรียงลำดับสุดท้าย) 
		 * และพิมพ์สมาชิกทั้งหมดในลำดับที่ถูกต้องออกมา
		 */
	}
}
