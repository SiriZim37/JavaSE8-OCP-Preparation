package concurrency;

public class A00_Summary {
	
/*
	 หมายเหตุ: สรุปหัวข้อ Thread & Concurrency สำหรับ Java OCP SE 8
	 
	 1. **พื้นฐานของ Thread**
	    - ใช้ Thread เพื่อประมวลผลงานพร้อมกัน (Parallel Execution)
	    - การสร้างเธรดทำได้ 2 วิธี:
	      a) สืบทอดคลาส Thread และ override เมธอด run()
	      b) ใช้อินเทอร์เฟซ Runnable และส่งเข้าไปในคอนสตรัคเตอร์ของ Thread
	    - start() ใช้เริ่มเธรด -> จะเรียก run() อัตโนมัติ
	    - run() เป็นโค้ดที่เธรดจะทำงาน
	
	 2. **Synchronization**
	    - ใช้ synchronized เพื่อป้องกันการเข้าถึงทรัพยากรที่ใช้ร่วมกันพร้อมกัน
	    - Critical Section คือส่วนของโค้ดที่ต้องควบคุมการเข้าถึง
	    - ตัวอย่าง:
	      synchronized(this) { // โค้ดในนี้จะมีเพียงเธรดเดียวที่ทำงานพร้อมกัน }
	
	 3. **Concurrency Utilities**
	    - ใช้คลาสใน java.util.concurrent เพื่อจัดการเธรด เช่น:
	      - ExecutorService: จัดการเธรดแบบ Pool
	      - CyclicBarrier: รอให้เธรดทั้งหมดทำงานเสร็จพร้อมกัน
	      - CountDownLatch: ใช้รอเธรดจำนวนหนึ่งให้เสร็จก่อนดำเนินการต่อ
	    - ตัวอย่าง ExecutorService:
	      ExecutorService service = Executors.newFixedThreadPool(2);
	      service.submit(() -> System.out.println("Task"));
	      service.shutdown();
	
	 4. **Atomic Variables**
	    - ใช้ java.util.concurrent.atomic เช่น AtomicInteger แทนการใช้ synchronized
	    - ตัวอย่าง AtomicInteger:
	      AtomicInteger counter = new AtomicInteger(0);
	      counter.incrementAndGet(); // เพิ่มค่าแบบ Thread-safe
	
	 5. **Fork/Join Framework**
	    - ใช้ RecursiveTask หรือ RecursiveAction เพื่อแบ่งงานใหญ่ให้เล็กลง
	    - เหมาะสำหรับการประมวลผลข้อมูลขนาดใหญ่
	    - ตัวอย่าง RecursiveTask:
	      class SumTask extends RecursiveTask<Integer> {
	          // โค้ดแบ่งงานย่อยและรวมผลลัพธ์
	      }
	
	 6. **Deadlock**
	    - เกิดเมื่อเธรดสองตัวล็อคทรัพยากรและรอซึ่งกันและกัน
	    - วิธีป้องกัน:
	      - ใช้ Lock ในลำดับที่กำหนด
	      - หลีกเลี่ยงการถือทรัพยากรหลายอย่างพร้อมกัน
	
	 7. **คำแนะนำสำหรับการสอบ**
	    - จำการใช้งาน start() และ synchronized ให้เข้าใจลึกซึ้ง
	    - ฝึกโค้ดเกี่ยวกับ ExecutorService, Atomic Variables, และ Fork/Join Framework
	    - ระวังคำถามที่เกี่ยวกับ Deadlock และ Race Condition
	    - ใช้ Lock หรือ synchronized block อย่างเหมาะสม

ตารางสรุปหัวข้อ Thread & Concurrency สำหรับ Java OCP SE 8

| **หัวข้อ**                    	 | **คำอธิบาย**                                                                 		 |
|--------------------------------|-------------------------------------------------------------------------------|
| **Thread Basics**              | ใช้ Thread เพื่อทำงานพร้อมกัน (Parallel Execution)                           			 |	
|                                | สร้างเธรดด้วย `Thread` หรือ `Runnable`                                      		 |
|                                | ใช้ `start()` เพื่อเริ่มเธรด ไม่ควรเรียก `run()` โดยตรง                      				 |
|--------------------------------|-------------------------------------------------------------------------------|
| **Synchronization**            | ใช้ `synchronized` เพื่อควบคุมการเข้าถึงทรัพยากรที่ใช้ร่วมกัน               						 |
|                                | ป้องกัน Race Condition                                                      	 |
|--------------------------------|-------------------------------------------------------------------------------|
| **Executor Framework**         | ใช้จัดการเธรดอย่างมีประสิทธิภาพ:                                            				 |
|                                | - `newFixedThreadPool(int)` สร้างเธรดจำนวนคงที่                             			 |
|                                | - `newCachedThreadPool()` สร้างเธรดแบบยืดหยุ่น                              			 |
|--------------------------------|-------------------------------------------------------------------------------|
| **Concurrency Utilities**      | - `CyclicBarrier`: รอให้เธรดครบตามจำนวนก่อนดำเนินการ                         			 |
|                                | - `CountDownLatch`: รอให้เธรดจำนวนหนึ่งเสร็จสมบูรณ์                          			 |
|--------------------------------|-------------------------------------------------------------------------------|
| **Atomic Variables**           | ใช้ `AtomicInteger` หรือคลาสในแพ็คเกจ `java.util.concurrent.atomic`         		 |
|                                | เพื่อเพิ่มหรือลดค่าที่ปลอดภัยจากการเข้าถึงพร้อมกัน                         						 |
|--------------------------------|-------------------------------------------------------------------------------|
| **Fork/Join Framework**        | แบ่งงานใหญ่ให้เล็กลงด้วย `RecursiveTask` หรือ `RecursiveAction`             				 |
|                                | เหมาะสำหรับงานที่สามารถแบ่งย่อยได้ (Divide and Conquer)                     				 |
|--------------------------------|-------------------------------------------------------------------------------|
| **Deadlock**                   | เกิดจากการล็อคทรัพยากรพร้อมกัน                                            			     |
|                                | ป้องกันโดยล็อคทรัพยากรตามลำดับและหลีกเลี่ยงการถือทรัพยากรหลายอย่างพร้อมกัน  							 |
|--------------------------------|-------------------------------------------------------------------------------|
| **Race Condition**             | เกิดจากหลายเธรดเข้าถึงทรัพยากรพร้อมกันและเกิดข้อผิดพลาด                   						 |
|                                | แก้ไขโดยใช้ `synchronized` หรือ `Atomic`                                   			 |
|--------------------------------|-------------------------------------------------------------------------------|


*/
}
