package set;

public class A01_WasIstSET {
	
/*
	Set 
	├── HashSet
	│   ├── Characteristics:
	│   │   ├── เป็นคอลเลกชันที่ไม่มีลำดับของสมาชิกที่ไม่ซ้ำกัน
	│   │   ├── อนุญาตให้มีค่า null
	│   │   ├── มีประสิทธิภาพสูงในการเพิ่ม ลบ และตรวจสอบการมีอยู่ของสมาชิก (O(1) เฉลี่ย)
	│   │   └── ไม่ถูกซิงโครไนซ์ (ไม่ปลอดภัยในเงื่อนไขการใช้งานหลายเธรด)
	│   ├── Methods:
	│   │   ├── add(E e): เพิ่มสมาชิกที่ระบุในเซ็ต
	│   │   ├── remove(Object o): ลบสมาชิกที่ระบุออกจากเซ็ต
	│   │   ├── contains(Object o): คืนค่า true หากเซ็ตมีสมาชิกที่ระบุ
	│   │   ├── size(): คืนค่าจำนวนสมาชิกในเซ็ต
	│   │   ├── isEmpty(): คืนค่า true หากเซ็ตว่าง
	│   │   ├── clear(): ลบสมาชิกทั้งหมดออกจากเซ็ต
	│   │   ├── iterator(): คืนค่า iterator สำหรับสมาชิกในเซ็ต
	│   │   └── toArray(): คืนค่าอาร์เรย์ที่ประกอบด้วยสมาชิกทั้งหมดในเซ็ต
	│   └── LinkedHashSet
	│       ├── Characteristics:
	│       │	├── รักษาลำดับการเพิ่มสมาชิก
	│       │	├── อนุญาตให้มีค่า null
	│       │	├── ช้ากว่า HashSet เล็กน้อยเนื่องจากการดูแลรักษาลำดับ (O(1) เฉลี่ย)
	│       │	└── ไม่ถูกซิงโครไนซ์ (ไม่ปลอดภัยในเงื่อนไขการใช้งานหลายเธรด)
	│       └───Methods:
	│       	├── add(E e): เพิ่มสมาชิกที่ระบุในเซ็ต
	│    		├── remove(Object o): ลบสมาชิกที่ระบุออกจากเซ็ต
	│       	├── contains(Object o): คืนค่า true หากเซ็ตมีสมาชิกที่ระบุ
	│       	├── size(): คืนค่าจำนวนสมาชิกในเซ็ต
	│       	├── isEmpty(): คืนค่า true หากเซ็ตว่าง
	│      		├── clear(): ลบสมาชิกทั้งหมดออกจากเซ็ต
	│       	├── iterator(): คืนค่า iterator สำหรับสมาชิกในเซ็ต
	│       	├── toArray(): คืนค่าอาร์เรย์ที่ประกอบด้วยสมาชิกทั้งหมดในเซ็ต
	│       	└── toString(): คืนค่าข้อความแทนเซ็ต
	└── SortedSet
	    ├── Characteristics:
	    │   ├── รักษาสมาชิกในลำดับที่จัดเรียง
	    │   ├── ไม่อนุญาตให้มีค่า null (จะทำให้เกิด NullPointerException)
	    │   └── มีวิธีการเพิ่มเติมในการเข้าถึงสมาชิกในลำดับที่จัดเรียง
	    ├── Methods:
	    │   ├── comparator(): คืนค่า comparator ที่ใช้ในการจัดเรียงเซ็ต หรือ null หากเซ็ตใช้การจัดเรียงตามธรรมชาติ
	    │   ├── first(): คืนค่าสมาชิกแรก (ต่ำสุด) ในเซ็ต
	    │   ├── last(): คืนค่าสมาชิกสุดท้าย (สูงสุด) ในเซ็ต
	    │   ├── headSet(E toElement): คืนค่าการมองเห็นของเซ็ตที่มีสมาชิกที่ต่ำกว่าจำนวนที่ระบุ
	    │   ├── tailSet(E fromElement): คืนค่าการมองเห็นของเซ็ตที่มีสมาชิกที่สูงกว่าหรือเท่ากับจำนวนที่ระบุ
	    │   ├── subSet(E fromElement, E toElement): คืนค่าการมองเห็นของเซ็ตที่มีสมาชิกในช่วงจาก fromElement รวมถึง ไปยัง toElement ไม่รวม
	    │   └── iterator(): คืนค่า iterator สำหรับสมาชิกในเซ็ตในลำดับที่จัดเรียง
	    └── NavigableSet
	        ├── Characteristics:
	        │   ├── ขยาย SortedSet และเพิ่มวิธีการสำหรับการนำทาง
	        │   ├── อนุญาตให้ค้นหาสมาชิกที่ใกล้เคียงที่สุดกับค่าที่กำหนด
	        │   ├── มีวิธีการ เช่น lower(), higher(), floor() และ ceiling()
	        │   └── ไม่ถูกซิงโครไนซ์ (ไม่ปลอดภัยในเงื่อนไขการใช้งานหลายเธรด)
	        ├── Methods:
	        │   ├── lower(E e): คืนค่าสมาชิกที่มากที่สุดที่น้อยกว่าค่าที่กำหนด หรือ null หากไม่มี
	        │   ├── floor(E e): คืนค่าสมาชิกที่มากที่สุดที่น้อยกว่าหรือเท่ากับค่าที่กำหนด หรือ null หากไม่มี
	        │   ├── ceiling(E e): คืนค่าสมาชิกที่น้อยที่สุดที่มากกว่าหรือเท่ากับค่าที่กำหนด หรือ null หากไม่มี
	        │   ├── higher(E e): คืนค่าสมาชิกที่น้อยที่สุดที่มากกว่าค่าที่กำหนด หรือ null หากไม่มี
	        │   ├── pollFirst(): ดึงและลบสมาชิกแรก (ต่ำสุด) หรือคืนค่า null หากเซ็ตว่าง
	        │   ├── pollLast(): ดึงและลบสมาชิกสุดท้าย (สูงสุด) หรือคืนค่า null หากเซ็ตว่าง
	        │   ├── descendingSet(): คืนค่าการมองเห็นในลำดับย้อนกลับของสมาชิกในเซ็ต
	        │   └── iterator(): คืนค่า iterator สำหรับสมาชิกในเซ็ตในลำดับย้อนกลับ
	        └── TreeSet
	            ├── Characteristics:
	            │   ├── implements NavigableSet และรักษาลำดับที่จัดเรียง
	            │   ├── ใช้โครงสร้างข้อมูล Red-Black tree
	            │   ├── อนุญาตให้มีค่า null หากไม่มีการใช้ comparator
	            │   ├── รับประกันค่า log(n) สำหรับการดำเนินการพื้นฐาน (add, remove, contains)
	            │   └── ไม่ถูกซิงโครไนซ์ (ไม่ปลอดภัยในเงื่อนไขการใช้งานหลายเธรด)
	            ├── Methods:
	            │   ├── add(E e): เพิ่มสมาชิกที่ระบุในเซ็ต
	            │   ├── remove(Object o): ลบสมาชิกที่ระบุออกจากเซ็ต
	            │   ├── contains(Object o): คืนค่า true หากเซ็ตมีสมาชิกที่ระบุ
	            │   ├── size(): คืนค่าจำนวนสมาชิกในเซ็ต
	            │   ├── isEmpty(): คืนค่า true หากเซ็ตว่าง
	            │   ├── clear(): ลบสมาชิกทั้งหมดออกจากเซ็ต
	            │   ├── first(): คืนค่าสมาชิกแรก (ต่ำสุด) ในเซ็ต
	            │   ├── last(): คืนค่าสมาชิกสุดท้าย (สูงสุด) ในเซ็ต
	            │   ├── headSet(E toElement): คืนค่าการมองเห็นของเซ็ตที่มีสมาชิกที่ต่ำกว่าจำนวนที่ระบุ
	            │   ├── tailSet(E fromElement): คืนค่าการมองเห็นของเซ็ตที่มีสมาชิกที่สูงกว่าหรือเท่ากับจำนวนที่ระบุ
	            │   ├── subSet(E fromElement, E toElement): คืนค่าการมองเห็นของเซ็ตที่มีสมาชิกในช่วงจาก fromElement รวมถึง ไปยัง toElement ไม่รวม
	            │   ├── descendingSet(): คืนค่าการมองเห็นในลำดับย้อนกลับของสมาชิกในเซ็ต
	            │   └── comparator(): คืนค่า comparator ที่ใช้ในการจัดเรียงเซ็ต หรือ null หากเซ็ตใช้การจัดเรียงตามธรรมชาติ

*/
	
	/*
	ทำไม Set (เช่น TreeSet) ถึงสามารถเพิ่มและเปลี่ยนขนาดได้?

	TreeSet (รวมถึง Set อื่นๆ เช่น HashSet) เป็นคอลเลกชันที่ออกแบบมาให้เพิ่ม (add) 
	และลบ (remove) องค์ประกอบได้โดยไม่มีข้อจำกัดเรื่องขนาด เพราะใช้โครงสร้างข้อมูล 
	ที่แตกต่างจาก List เช่น Arrays.asList() โดยเฉพาะ:

	1. โครงสร้างของ TreeSet:
		- TreeSet ใช้ Red-Black Tree เป็นโครงสร้างข้อมูลเบื้องหลัง 
		  ทำให้สามารถเพิ่มและลบองค์ประกอบได้ง่าย
		- โครงสร้างแบบต้นไม้ช่วยจัดเรียงองค์ประกอบให้อยู่ในลำดับที่เพิ่มขึ้นโดยอัตโนมัติ (Sorted Order)
	
	2. จัดเก็บค่าที่ไม่ซ้ำกัน:
		- Set จะไม่อนุญาตให้มีค่าซ้ำกันในคอลเลกชัน
		- TreeSet จะตรวจสอบทุกครั้งก่อนเพิ่มองค์ประกอบใหม่ว่าค่านั้นมีอยู่แล้วหรือไม่

	3. เปลี่ยนขนาดได้โดยอิสระ:
		- TreeSet สามารถเพิ่มหรือลบองค์ประกอบได้ตลอดเวลา
		- ขนาดของ TreeSet สามารถเปลี่ยนแปลงได้อย่างยืดหยุ่น ไม่มีข้อจำกัดเรื่องขนาด

	เปรียบเทียบกับ Arrays.asList():
	1. Arrays.asList():
		- สร้างคอลเลกชันที่เชื่อมโยงกับอาเรย์ต้นฉบับ
		- ขนาดคงที่ (Fixed Size) เพราะขึ้นอยู่กับอาเรย์ต้นฉบับ
	2. Set เช่น TreeSet:
		- ใช้โครงสร้างข้อมูลแบบไดนามิก (Dynamic Data Structure)
		- จัดการหน่วยความจำและองค์ประกอบได้อย่างยืดหยุ่น
*/
	            
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
